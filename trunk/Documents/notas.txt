********************************************************************************
COSAS PENDIENTES
********************************************************************************

13/11/2005
----------
- Mini-física que haga caer las cosas por efecto de la gravedad.
- Enlazar un objeto a otro de forma que el movimiento del primero se le trasmita al segundo.
- Liberar el ratón (y otras cosas) cuando la aplicación activa no sea el juego
- Implementar el resto de estados del juego (intro, pausa, scores, creditos...)
- Implementar estados del bicho (reposo, ronda, ataque, perdido, panico...)
- BSP: Cargar y pintar geometría que ahora mismo se ignora
- BSP: solucionar problema con los lightmaps y factor gamma

10/10/2005
----------
- Menu: hacer que funcione también con ratón.

09/10/2005
----------
- Sprites (máscara, blending)
- Antialias
- Ver como disparar acciones desde los menús
- Integrar un parser XML

07/10/2005
----------
- Entity NO debe tener las propiedades ToX, ToY y ToZ. Por el contrario, debe almacenar los ángulos de rotación de la entidad. Al llamar a SphericalLookAt() y CylindricalLookAt() le indicaremos unos ToX, ToY y ToZ, que serán convertidos a ángulos y almacenados en la entidad. REVISION: ¿ Es esto cierto ?


********************************************************************************
COSAS HECHAS
********************************************************************************

- Entity debe tener un par de funciones LookAt: una para orientar la entidad de forma "esferica" (en las 3 dimensiones) y otra para orientarla de forma cilíndrica (rotando solo en el eje Y).
- Implementar un sistema de texto compatible con Linux y Windows
- Input: soporte para raton.
- Hay clases de las cuales solo se precisa una y solo una instancia. Para esas clases existe un patrón de diseño llamado Singleton. En el caso de Input, ahora mismo es System quien se encarga de crear y mantener una instancia de la clase. Con el patrón Singleton la clase input se usaría de la siguiente forma:

Input::GetInstante->IsKeyPressed();

Esto nos aseguraría que la instancia estaría disponible desde cualquier clase que importase Input.h, sin necesidad de que importase también System.h y a su vez Window.h, etc.

Lo mismo vale para Timer, Window, etc.
